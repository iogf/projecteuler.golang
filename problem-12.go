/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import (
	"fmt"
	"math"
)

func feedSeq(seq []int, num int) []int {
	sqrt := math.Sqrt(float64(num))
	lim := int(sqrt + 1)

	for _, elem := range seq {
		if num%elem == 0 {
			return seq
		}

		if elem > lim {
			break
		}
	}

	seq = append(seq, num)
	return seq
}

func PrimeSeq(seq []int, max int) []int {
	if len(seq) == 0 {
		seq = append(seq, 2, 3)
	}

	i := seq[len(seq)-1] + 2

	for ; i < max; i += 2 {
		seq = feedSeq(seq, i)
	}

	return seq
}

func PrintSeq(seq []int) {
	for _, elem := range seq {
		fmt.Println("Elem:", elem)
	}
}

func consumeFactor(n int, p int) (int, int) {
	exp := 0

	if n == 0 {
		panic("Zero can't be accepted")
	}

	for {
		if n%p == 0 {
			n /= p
			exp += 1
		} else {
			break
		}
	}

	return exp, n
}

func cDivs(seq []int, num int) ([]int, int) {
	count := 1

	sqrt := math.Sqrt(float64(num))

	lim := int(sqrt + 1)

	seq = PrimeSeq(seq, lim)

	for _, elem := range seq {
		exp, rsl := consumeFactor(num, elem)
		num = rsl
		if exp > 0 {
			count *= exp + 1
		}
	}

	return seq, count
}

func main() {
	seq := make([]int, 0, 100)
	seq = PrimeSeq(seq, 100)

	// PrintSeq(seq)
	// fmt.Println(consumeFactor(0, 2))
	// fmt.Println(cDivs(seq, 28))

	for i := 1; ; i++ {
		tnum := i * (i + 1) / 2
		tmp, c := cDivs(seq, tnum)
		seq = tmp

		if c > 500 {
			fmt.Println("Result:", tnum)
			break
		}
	}

}
